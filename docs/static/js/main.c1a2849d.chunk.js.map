{"version":3,"sources":["GifElement.js","GifList.js","SearchBar.js","Paginator.js","App.js","serviceWorker.js","index.js"],"names":["GifElement","props","imgRef","React","createRef","copyButtonRef","className","src","this","url","frameBorder","allowFullScreen","alt","title","height","width","ref","loading","onClick","onDeleteClicked","id","navigator","clipboard","writeText","current","innerText","setTimeout","err","Component","GifList","deleteClicked","key","data","elementsToRender","map","x","i","images","fixed_width_downsampled","SearchBar","value","onSearch","searchBarValue","type","input","placeholder","defaultValue","searchTerm","onClear","onFetchTrending","Paginator","totalCount","totalPages","Math","ceil","itemsPerPage","currentPage","disabled","onPreviousClicked","onNextClicked","App","fetch","state","trending","search","queryURL","apiKey","GIFperPage","Number","page","then","res","json","currentList","gifList","setState","GIFtotalCount","pagination","total_count","storeStateInSessionStorage","catch","alert","searchValue","newGIFList","splice","findIndex","nextPage","previousPage","stateKey","sessionStorage","setItem","JSON","stringify","savedState","getItem","parse","loadStateFromSessionStorage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.c1a2849d.chunk.js","sourcesContent":["import React from 'react';\nimport './GifElement.css';\n\nclass GifElement extends React.Component {\n  constructor(props) {\n    super(props);\n    this.imgRef = React.createRef();\n    this.copyButtonRef = React.createRef();\n  }\n\n  render() {\n    const deleteClicked = () => {\n      this.props.onDeleteClicked(this.props.id);\n    };\n    const copyToClipboard = () => {\n      try {\n        navigator.clipboard.writeText(this.props.url);\n        this.copyButtonRef.current.innerText = 'Link copied!';\n        setTimeout(() => {\n          this.copyButtonRef.current.innerText = 'Copy';\n        }, 1000);\n      } catch (err) {\n        // this code doesn't work on iOS safari\n        // so we will just ignore it for now\n      }\n    };\n    return (\n      <div className=\"list-element flex\">\n        <img\n          src={this.props.url}\n          frameBorder=\"0\"\n          className=\"giphy-embed responsive-image\"\n          allowFullScreen\n          alt={this.props.title}\n          height={this.props.height}\n          width={this.props.width}\n          ref={this.imgRef}\n          loading=\"lazy\"\n        ></img>\n        <div className=\"element-buttons flex\">\n          <button className=\"btn\" onClick={deleteClicked}>\n            Delete\n          </button>\n          <button\n            className=\"btn\"\n            onClick={copyToClipboard}\n            ref={this.copyButtonRef}\n          >\n            Copy\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GifElement;\n","import React from 'react';\nimport GifElement from './GifElement';\nimport './GifList.css';\n\nclass GifList extends React.Component {\n  render() {\n    const deleteClicked = (key) => {\n      this.props.onDeleteClicked(key);\n    };\n    if (!this.props.data) {\n      return null;\n    }\n    const elementsToRender = this.props.data.map((x, i) => {\n      return (\n        <GifElement\n          id={x.id}\n          url={x.images.fixed_width_downsampled.url}\n          width={x.images.fixed_width_downsampled.width}\n          height={x.images.fixed_width_downsampled.height}\n          title={x.title}\n          key={x.id}\n          onDeleteClicked={deleteClicked}\n        ></GifElement>\n      );\n    });\n    return <div className=\"gif-list\">{elementsToRender}</div>;\n  }\n}\n\nexport default GifList;\n","import './SearchBar.css';\nimport React from 'react';\n\nclass SearchBar extends React.Component {\n  render() {\n    const searchClicked = (value) => {\n      this.props.onSearch(this.searchBarValue.value);\n    };\n\n    const fetchTrending = () => {\n      this.props.onFetchTrending();\n    };\n\n    const clearClicked = () => {\n      this.searchBarValue.value = '';\n      this.props.onClear();\n    };\n\n    return (\n      <>\n        <div className=\"search-bar-flex middle-flex pt-10\">\n          <button\n            onClick={searchClicked}\n            type=\"submit\"\n            className=\"btn searchButton\"\n          >\n            Search\n          </button>\n          <input\n            type=\"text\"\n            id=\"searchBar\"\n            ref={(input) => (this.searchBarValue = input)}\n            className=\"searchInput\"\n            placeholder=\"Search for GIFs\"\n            defaultValue={this.props.searchTerm}\n          />\n          <button className=\"btn clearButton\" onClick={clearClicked}>\n            Clear\n          </button>\n        </div>\n        <div className=\"search-bar-flex middle-flex pt-10\">\n          <button className=\"btn trendingButton\" onClick={fetchTrending}>\n            Trending\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default SearchBar;\n","import './Paginator.css';\nimport React from 'react';\n\nclass Paginator extends React.Component {\n  render() {\n    // if no elements we have no pages\n    if (this.props.totalCount === 0) {\n      return null;\n    }\n    // calculate the number of pages\n    const totalPages = Math.ceil(\n      this.props.totalCount / this.props.itemsPerPage\n    );\n    return (\n      <>\n        <div>\n          {this.props.currentPage + 1} | {totalPages}\n        </div>\n        <div className=\"flex middle-flex paginator-margin\">\n          <button\n            className=\"btn btn-paginator\"\n            disabled={this.props.currentPage + 1 === 1}\n            onClick={this.props.onPreviousClicked}\n          >\n            {'<<'}\n          </button>\n          <button\n            className=\"btn btn-paginator\"\n            disabled={this.props.currentPage + 1 === totalPages}\n            onClick={this.props.onNextClicked}\n          >\n            {'>>'}\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Paginator;\n","import React from 'react';\nimport './App.css';\nimport GifList from './GifList';\nimport SearchBar from './SearchBar';\nimport Paginator from './Paginator';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gifList: [],\n      page: 0,\n      search: false,\n      trending: false,\n      GIFtotalCount: 0,\n      GIFperPage: 24,\n      searchTerm: '',\n    };\n    this.apiKey = 'RrqvolVn7JwnF9Iln65dv1P0SYlU4mVs'; // demo api key\n  }\n\n  fetch = () => {\n    if (!this.state.trending && !this.state.search) {\n      return;\n    }\n    let queryURL = `https://api.giphy.com/v1/gifs/trending?api_key=${\n      this.apiKey\n    }&limit=${this.state.GIFperPage}&offset=${\n      Number(this.state.page) * Number(this.state.GIFperPage)\n    }`;\n    if (this.state.search) {\n      queryURL = `https://api.giphy.com/v1/gifs/search?api_key=${\n        this.apiKey\n      }&q=${this.state.searchTerm}&limit=${this.state.GIFperPage}&offset=${\n        this.state.page * this.state.GIFperPage\n      }`;\n    }\n    fetch(queryURL)\n      .then((res) => res.json())\n      .then((x) => {\n        const currentList = [...this.state.gifList, ...x.data];\n        this.setState(\n          {\n            gifList: currentList,\n            GIFtotalCount: x.pagination.total_count,\n          },\n          this.storeStateInSessionStorage\n        );\n      })\n      .catch((x) => {\n        alert('Error occured');\n      });\n  };\n\n  render() {\n    const search = (searchValue) => {\n      this.setState(\n        {\n          trending: false,\n          search: true,\n          searchTerm: searchValue,\n          gifList: [],\n          page: 0,\n          GIFtotalCount: 0,\n        },\n        this.fetch\n      );\n    };\n\n    const fetchTrending = () => {\n      this.setState(\n        {\n          trending: true,\n          search: false,\n          gifList: [],\n          page: 0,\n          GIFtotalCount: 0,\n          searchTerm: '',\n        },\n        this.fetch\n      );\n    };\n\n    const clear = () => {\n      this.setState(\n        {\n          gifList: [],\n          page: 0,\n          trending: false,\n          search: false,\n          GIFtotalCount: 0,\n          searchTerm: '',\n        },\n        this.storeStateInSessionStorage\n      );\n    };\n\n    const nextClicked = () => {\n      const nextPage = this.state.page + 1;\n      this.setState(\n        {\n          page: nextPage,\n          gifList: [],\n        },\n        this.fetch\n      );\n    };\n\n    const previousClicked = () => {\n      const previousPage = this.state.page - 1;\n      this.setState(\n        {\n          page: previousPage,\n          gifList: [],\n        },\n        this.fetch()\n      );\n    };\n\n    const deleteClicked = (key) => {\n      // Create new list reference\n      const newGIFList = [...this.state.gifList];\n\n      // Remove element according to id\n      newGIFList.splice(\n        this.state.gifList.findIndex((x) => x.id === key),\n        1\n      );\n\n      // Feed the new list to state\n      this.setState({ gifList: newGIFList });\n    };\n    return (\n      <div className=\"App \">\n        <div className=\"flex-container center\">\n          <SearchBar\n            onSearch={search}\n            onFetchTrending={fetchTrending}\n            onClear={clear}\n            searchTerm={this.state.searchTerm}\n          ></SearchBar>\n          <div className=\"mt-10\">Powered By GIPHY</div>\n          <div className=\"flex-item\">\n            <GifList\n              data={this.state.gifList}\n              onDeleteClicked={deleteClicked}\n            ></GifList>\n          </div>\n          <div className=\"flex-item\">\n            <Paginator\n              totalCount={this.state.GIFtotalCount}\n              itemsPerPage={this.state.GIFperPage}\n              currentPage={this.state.page}\n              onNextClicked={nextClicked}\n              onPreviousClicked={previousClicked}\n            ></Paginator>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  storeStateInSessionStorage() {\n    for (let stateKey in this.state) {\n      sessionStorage.setItem(stateKey, JSON.stringify(this.state[stateKey]));\n    }\n  }\n\n  loadStateFromSessionStorage() {\n    const savedState = this.state;\n    for (let stateKey in this.state) {\n      if (sessionStorage.getItem(stateKey) !== null) {\n        savedState[stateKey] = JSON.parse(sessionStorage.getItem(stateKey));\n      }\n    }\n    this.setState({ ...savedState });\n  }\n\n  componentDidMount() {\n    this.loadStateFromSessionStorage();\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}